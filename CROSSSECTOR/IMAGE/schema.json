{
  "$schema": "http://json-schema.org/schema#",
  "$schemaVersion": "0.0.1",
  "$id": "https://smart-data-models.github.io/dataModel.Energy/ThreePhaseAcMeasurement/schema.json",
  "title": "Smart Data Models - Energy / Three Phase AC Measurement",
  "description": "An electrical  measurement from a system that uses three phase alternating current.",
  "modelTags": "",
  "derivedFrom": "",
  "license": "https://smart-data-models.github.io/dataModel.Energy/ThreePhaseAcMeasurement/LICENSE.md",
  "type": "object",
  "allOf": [
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/GSMA-Commons"
    },
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "description": "Property. NGSI Entity Type. It must be equal to Image.",
          "enum": [
            "Image"
          ]
        },
        "imageType": {
          "type": "string",
          "enum": [
            "png",
            "jpg",
            "jpeg",
            "jfif",
            "pjpeg",
            "pjp",
            "svg",
            "tiff",
            "gif",
            "webp"
          ],
          "description": "Property. It must be equal to `png, jpg, jpeg, jfif, pjpeg, pjp, svg, tiff, gif or webp`."
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'https://schema.org/DateTime'. Reported date time creation corresponding to this observation."
        },
        "imageSource": {
          "type": "string",
          "description": "Property. Model:'https://schema.org/Text'. URL providing information for the image corresponding to this observation"
        },
        "detectedObject": {
          "type": "array",
          "description": "Property. It captures the object detected in the image and some related metadata, i.e., the bounding box inside the image where the object is detected, the typeOfObject (e.g., car, boat, human), and the probability of the detection",
          "items": {
            "type": "object",
            "properties": {
              "boundingBox": {
                "title": "GeoJSON Polygon",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "description": "Geoproperty. Geojson reference to the item. Polygon",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 4,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              "typeOfObject": {
                "type": "string"
              },
              "probability": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            }
          }
        }
      },
      "refCamera": {
        "type": "string",
        "format": "uri",
        "description": "Relationship. Image is captured by Camera"
      }
    }
  ],
  "required": [
    "id",
    "type"
  ]
}